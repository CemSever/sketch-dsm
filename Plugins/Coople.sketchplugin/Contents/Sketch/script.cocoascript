var onRun = function(context) {
var Document = require('sketch/dom').Document
var document = Document.getSelectedDocument();

var filePath = askFolderPath() + "Components.csv";
var componentData = createCSV(document);

if (writeTextToFile(componentData, filePath)) {
	alert(filePath, "Created");
}

function alert(msg, title) {
	[[NSApplication sharedApplication] displayDialog:msg withTitle:title];
}

function askFolderPath() {
	var panel = [NSOpenPanel openPanel];
	panel.canChooseFiles = false;
	panel.canChooseDirectories = true;
	panel.canCreateDirectories = true;

	var clicked = [panel runModal];

	if (clicked == NSFileHandlingPanelOKButton) {
		var absolutePath = [NSString stringWithFormat:@"%@", [[panel URLs] objectAtIndex:0]];

		var path = [absolutePath stringByReplacingOccurrencesOfString:"file://" withString:""];

		return path;
	}
}

function createCSV(document) {
    var columnSeparator = ",";

    var nameColumns = "Component Group,Component Name,Position,Size,Status";
    var nameColumnsCount = nameColumns.split(columnSeparator).length;

    var elementColumns = "Width,Height";

    var columns = [nameColumns, elementColumns].join(columnSeparator);
    var columnCount = columns.split(columnSeparator).length;

    var csv = columns;
    csv += '\n';

    var pageIndex = 0;
    var pageCount = document.pages.length;
    for (pageIndex = 0; pageIndex < pageCount; pageIndex++) {
        var page = document.pages[pageIndex];

        var componentIndex = 0;
        var componentCount = page.layers.length;
        for (componentIndex = 0; componentIndex < componentCount; componentIndex++) {
        	var component = page.layers[componentIndex];

			var attributes = nameAttributes(nameColumnsCount, component);

            attributes.push(component.frame.width);
            attributes.push(component.frame.height);
            
            var tempName = attributes.join(columnSeparator);

            csv += tempName + '\r\n';
        }
    }

    return csv;
}

/// Component name attributes
function nameAttributes(tagsCount, layer) {
	var attributes = layer.name.split('/');

	return fit(attributes, tagsCount, "");
}

function makeComponentData(document) {
	var pageIndex = 0;
	var pageCount = document.pages.length;

	var components = [];
	for (pageIndex = 0; pageIndex < pageCount; pageIndex++) {
	    var page = document.pages[pageIndex];
	    
	    var componentIndex = 0;
	    var componentCount = page.layers.length;
	    for (componentIndex = 0; componentIndex < componentCount; componentIndex++) {
	        var component = page.layers[componentIndex];

	        components.push({
	            name: component.name
	        });
	    }
	}

	var dictionary = { "components": components };

	return dictionary;
}

function writeDataToFile(data, filePath) {
	var json = JSON.stringify(data, null, "\t");

	var fileData = NSString.stringWithString(json);

	return [fileData writeToFile:filePath atomically:true encoding:NSUTF8StringEncoding error:error];
}

function writeTextToFile(text, filePath) {
	var fileData = [NSString stringWithFormat:@"%@", text];
	var path = [NSString stringWithFormat:@"%@", filePath];

	return [fileData writeToFile:path atomically:true encoding:NSUTF8StringEncoding error:nil];
}

/// Fit array with elements to size length
function fit(array, size, element) {
	var originalLength = array.length;

	var index = 0;
    for (index = originalLength; index < size; index++) {
    	array.push(element);
    }

    return array;
}
};
